/* Code generated by cmd/cgo; DO NOT EDIT. */

/* package github.com/Pie-Messaging/pie-core/cgo */


#line 1 "cgo-builtin-export-prolog"

#include <stddef.h> /* for ptrdiff_t below */

#ifndef GO_CGO_EXPORT_PROLOGUE_H
#define GO_CGO_EXPORT_PROLOGUE_H

#ifndef GO_CGO_GOSTRING_TYPEDEF
typedef struct { const char *p; ptrdiff_t n; } _GoString_;
#endif

#endif

/* Start of preamble from import "C" comments.  */


#line 8 "context.go"
 #include <stdint.h>
 #include <sys/types.h>

#line 1 "cgo-generated-wrapper"


#line 19 "net.go"
 #include <stdint.h>
 #include <sys/types.h>

#line 1 "cgo-generated-wrapper"


/* End of preamble from import "C" comments.  */


/* Start of boilerplate cgo prologue.  */
#line 1 "cgo-gcc-export-header-prolog"

#ifndef GO_CGO_PROLOGUE_H
#define GO_CGO_PROLOGUE_H

typedef signed char GoInt8;
typedef unsigned char GoUint8;
typedef short GoInt16;
typedef unsigned short GoUint16;
typedef int GoInt32;
typedef unsigned int GoUint32;
typedef long long GoInt64;
typedef unsigned long long GoUint64;
typedef GoInt64 GoInt;
typedef GoUint64 GoUint;
typedef __SIZE_TYPE__ GoUintptr;
typedef float GoFloat32;
typedef double GoFloat64;
typedef float _Complex GoComplex64;
typedef double _Complex GoComplex128;

/*
  static assertion to make sure the file is being used on architecture
  at least with matching size of GoInt.
*/
typedef char _check_for_64_bit_pointer_matching_GoInt[sizeof(void*)==64/8 ? 1:-1];

#ifndef GO_CGO_GOSTRING_TYPEDEF
typedef _GoString_ GoString;
#endif
typedef void *GoMap;
typedef void *GoChan;
typedef struct { void *t; void *v; } GoInterface;
typedef struct { void *data; GoInt len; GoInt cap; } GoSlice;

#endif

/* End of boilerplate cgo prologue.  */

#ifdef __cplusplus
extern "C" {
#endif

extern uintptr_t NewContext();
extern void CancelContext(uintptr_t ctxPtr);
extern void SetLogOutput(GoString path);
extern void HashBytes(GoSlice data, GoSlice result);
extern uintptr_t X509KeyPair(GoSlice certPEM, GoSlice keyPEM, GoSlice certDERResult);
extern uintptr_t GenerateKeyPair(GoSlice certResult, GoSlice keyResult, GoSlice certDERResult);

/* Return type for ListenNet */
struct ListenNet_return {
	uintptr_t r0;
	GoInt r1;
};
extern struct ListenNet_return ListenNet(GoString listenAddr, uintptr_t certPtr);

/* Return type for AcceptSession */
struct AcceptSession_return {
	uintptr_t r0;
	GoInt r1;
	GoInt r2;
};
extern struct AcceptSession_return AcceptSession(uintptr_t ctxPtr, uintptr_t serverPtr, GoSlice addrResult);
extern GoUint8 VerifyClientCert(uintptr_t serverPtr, GoSlice clientCertDER, GoSlice serverCertSign);

/* Return type for ConnectServer */
struct ConnectServer_return {
	uintptr_t r0;
	GoInt r1;
};
extern struct ConnectServer_return ConnectServer(uintptr_t ctxPtr, GoSlice clientID, uintptr_t clientCertPtr, GoString serverAddr, GoSlice serverCertDER);

/* Return type for ConnectTracker */
struct ConnectTracker_return {
	uintptr_t r0;
	GoInt r1;
};
extern struct ConnectTracker_return ConnectTracker(uintptr_t ctxPtr, GoString addr, GoSlice idResult);

/* Return type for SessionAcceptStream */
struct SessionAcceptStream_return {
	uintptr_t r0;
	GoInt64 r1;
	GoInt r2;
};
extern struct SessionAcceptStream_return SessionAcceptStream(uintptr_t ctxPtr, uintptr_t sessionPtr, GoSlice recvBuf);

/* Return type for SessionOpenStream */
struct SessionOpenStream_return {
	uintptr_t r0;
	GoInt64 r1;
	GoInt r2;
};
extern struct SessionOpenStream_return SessionOpenStream(uintptr_t sessionPtr, GoSlice recvBuf);

/* Return type for StreamRecvData */
struct StreamRecvData_return {
	GoInt r0;
	GoInt r1;
	GoInt r2;
};
extern struct StreamRecvData_return StreamRecvData(uintptr_t streamPtr);
extern GoInt StreamSendData(uintptr_t streamPtr, GoSlice data, GoInt64 timeout);
extern void CloseStream(uintptr_t streamPtr);
extern void CloseSession(uintptr_t sessionPtr, GoUint64 err);
extern void CloseServer(uintptr_t serverPtr);
extern void DeleteCert(uintptr_t certPtr);

#ifdef __cplusplus
}
#endif
