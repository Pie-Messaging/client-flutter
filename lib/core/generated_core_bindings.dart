// AUTO GENERATED FILE, DO NOT EDIT.
//
// Generated by `package:ffigen`.
import 'dart:ffi' as ffi;

/// Bindings to core
class Core {
  /// Holds the symbol lookup function.
  final ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName) _lookup;

  /// The symbols are looked up in [dynamicLibrary].
  Core(ffi.DynamicLibrary dynamicLibrary) : _lookup = dynamicLibrary.lookup;

  /// The symbols are looked up with [lookup].
  Core.fromLookup(ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName) lookup) : _lookup = lookup;

  int select(
    int __nfds,
    ffi.Pointer<fd_set> __readfds,
    ffi.Pointer<fd_set> __writefds,
    ffi.Pointer<fd_set> __exceptfds,
    ffi.Pointer<timeval> __timeout,
  ) {
    return _select(
      __nfds,
      __readfds,
      __writefds,
      __exceptfds,
      __timeout,
    );
  }

  late final _selectPtr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function(ffi.Int32, ffi.Pointer<fd_set>, ffi.Pointer<fd_set>, ffi.Pointer<fd_set>, ffi.Pointer<timeval>)>>(
          'select');
  late final _select =
      _selectPtr.asFunction<int Function(int, ffi.Pointer<fd_set>, ffi.Pointer<fd_set>, ffi.Pointer<fd_set>, ffi.Pointer<timeval>)>();

  int pselect(
    int __nfds,
    ffi.Pointer<fd_set> __readfds,
    ffi.Pointer<fd_set> __writefds,
    ffi.Pointer<fd_set> __exceptfds,
    ffi.Pointer<timespec> __timeout,
    ffi.Pointer<__sigset_t> __sigmask,
  ) {
    return _pselect(
      __nfds,
      __readfds,
      __writefds,
      __exceptfds,
      __timeout,
      __sigmask,
    );
  }

  late final _pselectPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Int32, ffi.Pointer<fd_set>, ffi.Pointer<fd_set>, ffi.Pointer<fd_set>, ffi.Pointer<timespec>, ffi.Pointer<__sigset_t>)>>('pselect');
  late final _pselect = _pselectPtr
      .asFunction<int Function(int, ffi.Pointer<fd_set>, ffi.Pointer<fd_set>, ffi.Pointer<fd_set>, ffi.Pointer<timespec>, ffi.Pointer<__sigset_t>)>();

  int NewContext() {
    return _NewContext();
  }

  late final _NewContextPtr = _lookup<ffi.NativeFunction<uintptr_t Function()>>('NewContext');
  late final _NewContext = _NewContextPtr.asFunction<int Function()>();

  void CancelContext(
    int ctxPtr,
  ) {
    return _CancelContext(
      ctxPtr,
    );
  }

  late final _CancelContextPtr = _lookup<ffi.NativeFunction<ffi.Void Function(uintptr_t)>>('CancelContext');
  late final _CancelContext = _CancelContextPtr.asFunction<void Function(int)>();

  void SetLogOutput(
    GoString path,
  ) {
    return _SetLogOutput(
      path,
    );
  }

  late final _SetLogOutputPtr = _lookup<ffi.NativeFunction<ffi.Void Function(GoString)>>('SetLogOutput');
  late final _SetLogOutput = _SetLogOutputPtr.asFunction<void Function(GoString)>();

  void HashBytes(
    GoSlice data,
    GoSlice result,
  ) {
    return _HashBytes(
      data,
      result,
    );
  }

  late final _HashBytesPtr = _lookup<ffi.NativeFunction<ffi.Void Function(GoSlice, GoSlice)>>('HashBytes');
  late final _HashBytes = _HashBytesPtr.asFunction<void Function(GoSlice, GoSlice)>();

  int X509KeyPair(
    GoSlice certPEM,
    GoSlice keyPEM,
    GoSlice certDERResult,
  ) {
    return _X509KeyPair(
      certPEM,
      keyPEM,
      certDERResult,
    );
  }

  late final _X509KeyPairPtr = _lookup<ffi.NativeFunction<uintptr_t Function(GoSlice, GoSlice, GoSlice)>>('X509KeyPair');
  late final _X509KeyPair = _X509KeyPairPtr.asFunction<int Function(GoSlice, GoSlice, GoSlice)>();

  int GenerateKeyPair(
    GoSlice certResult,
    GoSlice keyResult,
    GoSlice certDERResult,
  ) {
    return _GenerateKeyPair(
      certResult,
      keyResult,
      certDERResult,
    );
  }

  late final _GenerateKeyPairPtr = _lookup<ffi.NativeFunction<uintptr_t Function(GoSlice, GoSlice, GoSlice)>>('GenerateKeyPair');
  late final _GenerateKeyPair = _GenerateKeyPairPtr.asFunction<int Function(GoSlice, GoSlice, GoSlice)>();

  ListenNet_return ListenNet(
    GoString listenAddr,
    int certPtr,
  ) {
    return _ListenNet(
      listenAddr,
      certPtr,
    );
  }

  late final _ListenNetPtr = _lookup<ffi.NativeFunction<ListenNet_return Function(GoString, uintptr_t)>>('ListenNet');
  late final _ListenNet = _ListenNetPtr.asFunction<ListenNet_return Function(GoString, int)>();

  AcceptSession_return AcceptSession(
    int ctxPtr,
    int serverPtr,
    GoSlice addrResult,
  ) {
    return _AcceptSession(
      ctxPtr,
      serverPtr,
      addrResult,
    );
  }

  late final _AcceptSessionPtr = _lookup<ffi.NativeFunction<AcceptSession_return Function(uintptr_t, uintptr_t, GoSlice)>>('AcceptSession');
  late final _AcceptSession = _AcceptSessionPtr.asFunction<AcceptSession_return Function(int, int, GoSlice)>();

  int VerifyClientCert(
    int serverPtr,
    GoSlice clientCertDER,
    GoSlice serverCertSign,
  ) {
    return _VerifyClientCert(
      serverPtr,
      clientCertDER,
      serverCertSign,
    );
  }

  late final _VerifyClientCertPtr = _lookup<ffi.NativeFunction<GoUint8 Function(uintptr_t, GoSlice, GoSlice)>>('VerifyClientCert');
  late final _VerifyClientCert = _VerifyClientCertPtr.asFunction<int Function(int, GoSlice, GoSlice)>();

  ConnectServer_return ConnectServer(
    int ctxPtr,
    GoSlice clientID,
    int clientCertPtr,
    GoString serverAddr,
    GoSlice serverCertDER,
  ) {
    return _ConnectServer(
      ctxPtr,
      clientID,
      clientCertPtr,
      serverAddr,
      serverCertDER,
    );
  }

  late final _ConnectServerPtr =
      _lookup<ffi.NativeFunction<ConnectServer_return Function(uintptr_t, GoSlice, uintptr_t, GoString, GoSlice)>>('ConnectServer');
  late final _ConnectServer = _ConnectServerPtr.asFunction<ConnectServer_return Function(int, GoSlice, int, GoString, GoSlice)>();

  ConnectTracker_return ConnectTracker(
    int ctxPtr,
    GoString addr,
    GoSlice idResult,
  ) {
    return _ConnectTracker(
      ctxPtr,
      addr,
      idResult,
    );
  }

  late final _ConnectTrackerPtr = _lookup<ffi.NativeFunction<ConnectTracker_return Function(uintptr_t, GoString, GoSlice)>>('ConnectTracker');
  late final _ConnectTracker = _ConnectTrackerPtr.asFunction<ConnectTracker_return Function(int, GoString, GoSlice)>();

  SessionAcceptStream_return SessionAcceptStream(
    int ctxPtr,
    int sessionPtr,
    GoSlice recvBuf,
  ) {
    return _SessionAcceptStream(
      ctxPtr,
      sessionPtr,
      recvBuf,
    );
  }

  late final _SessionAcceptStreamPtr =
      _lookup<ffi.NativeFunction<SessionAcceptStream_return Function(uintptr_t, uintptr_t, GoSlice)>>('SessionAcceptStream');
  late final _SessionAcceptStream = _SessionAcceptStreamPtr.asFunction<SessionAcceptStream_return Function(int, int, GoSlice)>();

  SessionOpenStream_return SessionOpenStream(
    int sessionPtr,
    GoSlice recvBuf,
  ) {
    return _SessionOpenStream(
      sessionPtr,
      recvBuf,
    );
  }

  late final _SessionOpenStreamPtr = _lookup<ffi.NativeFunction<SessionOpenStream_return Function(uintptr_t, GoSlice)>>('SessionOpenStream');
  late final _SessionOpenStream = _SessionOpenStreamPtr.asFunction<SessionOpenStream_return Function(int, GoSlice)>();

  StreamRecvData_return StreamRecvData(
    int streamPtr,
  ) {
    return _StreamRecvData(
      streamPtr,
    );
  }

  late final _StreamRecvDataPtr = _lookup<ffi.NativeFunction<StreamRecvData_return Function(uintptr_t)>>('StreamRecvData');
  late final _StreamRecvData = _StreamRecvDataPtr.asFunction<StreamRecvData_return Function(int)>();

  int StreamSendData(
    int streamPtr,
    GoSlice data,
    int timeout,
  ) {
    return _StreamSendData(
      streamPtr,
      data,
      timeout,
    );
  }

  late final _StreamSendDataPtr = _lookup<ffi.NativeFunction<GoInt Function(uintptr_t, GoSlice, GoInt64)>>('StreamSendData');
  late final _StreamSendData = _StreamSendDataPtr.asFunction<int Function(int, GoSlice, int)>();

  void CloseStream(
    int streamPtr,
  ) {
    return _CloseStream(
      streamPtr,
    );
  }

  late final _CloseStreamPtr = _lookup<ffi.NativeFunction<ffi.Void Function(uintptr_t)>>('CloseStream');
  late final _CloseStream = _CloseStreamPtr.asFunction<void Function(int)>();

  void CloseSession(
    int sessionPtr,
    int err,
  ) {
    return _CloseSession(
      sessionPtr,
      err,
    );
  }

  late final _CloseSessionPtr = _lookup<ffi.NativeFunction<ffi.Void Function(uintptr_t, GoUint64)>>('CloseSession');
  late final _CloseSession = _CloseSessionPtr.asFunction<void Function(int, int)>();

  void CloseServer(
    int serverPtr,
  ) {
    return _CloseServer(
      serverPtr,
    );
  }

  late final _CloseServerPtr = _lookup<ffi.NativeFunction<ffi.Void Function(uintptr_t)>>('CloseServer');
  late final _CloseServer = _CloseServerPtr.asFunction<void Function(int)>();

  void DeleteCert(
    int certPtr,
  ) {
    return _DeleteCert(
      certPtr,
    );
  }

  late final _DeleteCertPtr = _lookup<ffi.NativeFunction<ffi.Void Function(uintptr_t)>>('DeleteCert');
  late final _DeleteCert = _DeleteCertPtr.asFunction<void Function(int)>();
}

class max_align_t extends ffi.Opaque {}

class _GoString_ extends ffi.Struct {
  external ffi.Pointer<ffi.Int8> p;

  @ptrdiff_t()
  external int n;
}

typedef ptrdiff_t = ffi.Int64;

class __fsid_t extends ffi.Struct {
  @ffi.Array.multi([2])
  external ffi.Array<ffi.Int32> __val;
}

class __sigset_t extends ffi.Struct {
  @ffi.Array.multi([16])
  external ffi.Array<ffi.Uint64> __val;
}

class timeval extends ffi.Struct {
  @__time_t()
  external int tv_sec;

  @__suseconds_t()
  external int tv_usec;
}

typedef __time_t = ffi.Int64;
typedef __suseconds_t = ffi.Int64;

class timespec extends ffi.Struct {
  @__time_t()
  external int tv_sec;

  @__syscall_slong_t()
  external int tv_nsec;
}

typedef __syscall_slong_t = ffi.Int64;

class fd_set extends ffi.Struct {
  @ffi.Array.multi([16])
  external ffi.Array<__fd_mask> __fds_bits;
}

typedef __fd_mask = ffi.Int64;

class __atomic_wide_counter extends ffi.Union {
  @ffi.Uint64()
  external int __value64;

  external UnnamedStruct1 __value32;
}

class UnnamedStruct1 extends ffi.Struct {
  @ffi.Uint32()
  external int __low;

  @ffi.Uint32()
  external int __high;
}

class __pthread_internal_list extends ffi.Struct {
  external ffi.Pointer<__pthread_internal_list> __prev;

  external ffi.Pointer<__pthread_internal_list> __next;
}

class __pthread_internal_slist extends ffi.Struct {
  external ffi.Pointer<__pthread_internal_slist> __next;
}

class __pthread_mutex_s extends ffi.Struct {
  @ffi.Int32()
  external int __lock;

  @ffi.Uint32()
  external int __count;

  @ffi.Int32()
  external int __owner;

  @ffi.Uint32()
  external int __nusers;

  @ffi.Int32()
  external int __kind;

  @ffi.Int16()
  external int __spins;

  @ffi.Int16()
  external int __elision;

  external __pthread_list_t __list;
}

typedef __pthread_list_t = __pthread_internal_list;

class __pthread_rwlock_arch_t extends ffi.Struct {
  @ffi.Uint32()
  external int __readers;

  @ffi.Uint32()
  external int __writers;

  @ffi.Uint32()
  external int __wrphase_futex;

  @ffi.Uint32()
  external int __writers_futex;

  @ffi.Uint32()
  external int __pad3;

  @ffi.Uint32()
  external int __pad4;

  @ffi.Int32()
  external int __cur_writer;

  @ffi.Int32()
  external int __shared;

  @ffi.Int8()
  external int __rwelision;

  @ffi.Array.multi([7])
  external ffi.Array<ffi.Uint8> __pad1;

  @ffi.Uint64()
  external int __pad2;

  @ffi.Uint32()
  external int __flags;
}

class __pthread_cond_s extends ffi.Struct {
  external __atomic_wide_counter __wseq;

  external __atomic_wide_counter __g1_start;

  @ffi.Array.multi([2])
  external ffi.Array<ffi.Uint32> __g_refs;

  @ffi.Array.multi([2])
  external ffi.Array<ffi.Uint32> __g_size;

  @ffi.Uint32()
  external int __g1_orig_size;

  @ffi.Uint32()
  external int __wrefs;

  @ffi.Array.multi([2])
  external ffi.Array<ffi.Uint32> __g_signals;
}

class __once_flag extends ffi.Struct {
  @ffi.Int32()
  external int __data;
}

class pthread_mutexattr_t extends ffi.Union {
  @ffi.Array.multi([4])
  external ffi.Array<ffi.Int8> __size;

  @ffi.Int32()
  external int __align;
}

class pthread_condattr_t extends ffi.Union {
  @ffi.Array.multi([4])
  external ffi.Array<ffi.Int8> __size;

  @ffi.Int32()
  external int __align;
}

class pthread_attr_t extends ffi.Union {
  @ffi.Array.multi([56])
  external ffi.Array<ffi.Int8> __size;

  @ffi.Int64()
  external int __align;
}

class pthread_mutex_t extends ffi.Union {
  external __pthread_mutex_s __data;

  @ffi.Array.multi([40])
  external ffi.Array<ffi.Int8> __size;

  @ffi.Int64()
  external int __align;
}

class pthread_cond_t extends ffi.Union {
  external __pthread_cond_s __data;

  @ffi.Array.multi([48])
  external ffi.Array<ffi.Int8> __size;

  @ffi.Int64()
  external int __align;
}

class pthread_rwlock_t extends ffi.Union {
  external __pthread_rwlock_arch_t __data;

  @ffi.Array.multi([56])
  external ffi.Array<ffi.Int8> __size;

  @ffi.Int64()
  external int __align;
}

class pthread_rwlockattr_t extends ffi.Union {
  @ffi.Array.multi([8])
  external ffi.Array<ffi.Int8> __size;

  @ffi.Int64()
  external int __align;
}

class pthread_barrier_t extends ffi.Union {
  @ffi.Array.multi([32])
  external ffi.Array<ffi.Int8> __size;

  @ffi.Int64()
  external int __align;
}

class pthread_barrierattr_t extends ffi.Union {
  @ffi.Array.multi([4])
  external ffi.Array<ffi.Int8> __size;

  @ffi.Int32()
  external int __align;
}

class GoInterface extends ffi.Struct {
  external ffi.Pointer<ffi.Void> t;

  external ffi.Pointer<ffi.Void> v;
}

class GoSlice extends ffi.Struct {
  external ffi.Pointer<ffi.Void> data;

  @GoInt()
  external int len;

  @GoInt()
  external int cap;
}

typedef GoInt = GoInt64;
typedef GoInt64 = ffi.Int64;
typedef uintptr_t = ffi.Uint64;
typedef GoString = _GoString_;

class ListenNet_return extends ffi.Struct {
  @uintptr_t()
  external int r0;

  @GoInt()
  external int r1;
}

class AcceptSession_return extends ffi.Struct {
  @uintptr_t()
  external int r0;

  @GoInt()
  external int r1;

  @GoInt()
  external int r2;
}

typedef GoUint8 = ffi.Uint8;

class ConnectServer_return extends ffi.Struct {
  @uintptr_t()
  external int r0;

  @GoInt()
  external int r1;
}

class ConnectTracker_return extends ffi.Struct {
  @uintptr_t()
  external int r0;

  @GoInt()
  external int r1;
}

class SessionAcceptStream_return extends ffi.Struct {
  @uintptr_t()
  external int r0;

  @GoInt64()
  external int r1;

  @GoInt()
  external int r2;
}

class SessionOpenStream_return extends ffi.Struct {
  @uintptr_t()
  external int r0;

  @GoInt64()
  external int r1;

  @GoInt()
  external int r2;
}

class StreamRecvData_return extends ffi.Struct {
  @GoInt()
  external int r0;

  @GoInt()
  external int r1;

  @GoInt()
  external int r2;
}

typedef GoUint64 = ffi.Uint64;

const int NULL = 0;

const int _STDINT_H = 1;

const int _FEATURES_H = 1;

const int _DEFAULT_SOURCE = 1;

const int __GLIBC_USE_ISOC2X = 1;

const int __USE_ISOC11 = 1;

const int __USE_ISOC99 = 1;

const int __USE_ISOC95 = 1;

const int _POSIX_SOURCE = 1;

const int _POSIX_C_SOURCE = 200809;

const int __USE_POSIX = 1;

const int __USE_POSIX2 = 1;

const int __USE_POSIX199309 = 1;

const int __USE_POSIX199506 = 1;

const int __USE_XOPEN2K = 1;

const int __USE_XOPEN2K8 = 1;

const int _ATFILE_SOURCE = 1;

const int __WORDSIZE = 64;

const int __WORDSIZE_TIME64_COMPAT32 = 1;

const int __SYSCALL_WORDSIZE = 64;

const int __TIMESIZE = 64;

const int __USE_MISC = 1;

const int __USE_ATFILE = 1;

const int __USE_FORTIFY_LEVEL = 0;

const int __GLIBC_USE_DEPRECATED_GETS = 0;

const int __GLIBC_USE_DEPRECATED_SCANF = 0;

const int _STDC_PREDEF_H = 1;

const int __STDC_IEC_559__ = 1;

const int __STDC_IEC_60559_BFP__ = 201404;

const int __STDC_IEC_559_COMPLEX__ = 1;

const int __STDC_IEC_60559_COMPLEX__ = 201404;

const int __STDC_ISO_10646__ = 201706;

const int __GNU_LIBRARY__ = 6;

const int __GLIBC__ = 2;

const int __GLIBC_MINOR__ = 35;

const int _SYS_CDEFS_H = 1;

const int __THROW = 1;

const int __THROWNL = 1;

const int __glibc_c99_flexarr_available = 1;

const int __LDOUBLE_REDIRECTS_TO_FLOAT128_ABI = 0;

const int __HAVE_GENERIC_SELECTION = 0;

const int __GLIBC_USE_LIB_EXT2 = 1;

const int __GLIBC_USE_IEC_60559_BFP_EXT = 1;

const int __GLIBC_USE_IEC_60559_BFP_EXT_C2X = 1;

const int __GLIBC_USE_IEC_60559_EXT = 1;

const int __GLIBC_USE_IEC_60559_FUNCS_EXT = 1;

const int __GLIBC_USE_IEC_60559_FUNCS_EXT_C2X = 1;

const int __GLIBC_USE_IEC_60559_TYPES_EXT = 1;

const int _BITS_TYPES_H = 1;

const int _BITS_TYPESIZES_H = 1;

const int __OFF_T_MATCHES_OFF64_T = 1;

const int __INO_T_MATCHES_INO64_T = 1;

const int __RLIM_T_MATCHES_RLIM64_T = 1;

const int __STATFS_MATCHES_STATFS64 = 1;

const int __KERNEL_OLD_TIMEVAL_MATCHES_TIMEVAL64 = 1;

const int __FD_SETSIZE = 1024;

const int _BITS_TIME64_H = 1;

const int _BITS_WCHAR_H = 1;

const int __WCHAR_MAX = 2147483647;

const int __WCHAR_MIN = -2147483648;

const int _BITS_STDINT_INTN_H = 1;

const int _BITS_STDINT_UINTN_H = 1;

const int INT8_MIN = -128;

const int INT16_MIN = -32768;

const int INT32_MIN = -2147483648;

const int INT64_MIN = -9223372036854775808;

const int INT8_MAX = 127;

const int INT16_MAX = 32767;

const int INT32_MAX = 2147483647;

const int INT64_MAX = 9223372036854775807;

const int UINT8_MAX = 255;

const int UINT16_MAX = 65535;

const int UINT32_MAX = 4294967295;

const int UINT64_MAX = -1;

const int INT_LEAST8_MIN = -128;

const int INT_LEAST16_MIN = -32768;

const int INT_LEAST32_MIN = -2147483648;

const int INT_LEAST64_MIN = -9223372036854775808;

const int INT_LEAST8_MAX = 127;

const int INT_LEAST16_MAX = 32767;

const int INT_LEAST32_MAX = 2147483647;

const int INT_LEAST64_MAX = 9223372036854775807;

const int UINT_LEAST8_MAX = 255;

const int UINT_LEAST16_MAX = 65535;

const int UINT_LEAST32_MAX = 4294967295;

const int UINT_LEAST64_MAX = -1;

const int INT_FAST8_MIN = -128;

const int INT_FAST16_MIN = -9223372036854775808;

const int INT_FAST32_MIN = -9223372036854775808;

const int INT_FAST64_MIN = -9223372036854775808;

const int INT_FAST8_MAX = 127;

const int INT_FAST16_MAX = 9223372036854775807;

const int INT_FAST32_MAX = 9223372036854775807;

const int INT_FAST64_MAX = 9223372036854775807;

const int UINT_FAST8_MAX = 255;

const int UINT_FAST16_MAX = -1;

const int UINT_FAST32_MAX = -1;

const int UINT_FAST64_MAX = -1;

const int INTPTR_MIN = -9223372036854775808;

const int INTPTR_MAX = 9223372036854775807;

const int UINTPTR_MAX = -1;

const int INTMAX_MIN = -9223372036854775808;

const int INTMAX_MAX = 9223372036854775807;

const int UINTMAX_MAX = -1;

const int PTRDIFF_MIN = -9223372036854775808;

const int PTRDIFF_MAX = 9223372036854775807;

const int SIG_ATOMIC_MIN = -2147483648;

const int SIG_ATOMIC_MAX = 2147483647;

const int SIZE_MAX = -1;

const int WCHAR_MIN = -2147483648;

const int WCHAR_MAX = 2147483647;

const int WINT_MIN = 0;

const int WINT_MAX = 4294967295;

const int _SYS_TYPES_H = 1;

const int __clock_t_defined = 1;

const int __clockid_t_defined = 1;

const int __time_t_defined = 1;

const int __timer_t_defined = 1;

const int __BIT_TYPES_DEFINED__ = 1;

const int _ENDIAN_H = 1;

const int _BITS_ENDIAN_H = 1;

const int __LITTLE_ENDIAN = 1234;

const int __BIG_ENDIAN = 4321;

const int __PDP_ENDIAN = 3412;

const int _BITS_ENDIANNESS_H = 1;

const int __BYTE_ORDER = 1234;

const int __FLOAT_WORD_ORDER = 1234;

const int LITTLE_ENDIAN = 1234;

const int BIG_ENDIAN = 4321;

const int PDP_ENDIAN = 3412;

const int BYTE_ORDER = 1234;

const int _BITS_BYTESWAP_H = 1;

const int _BITS_UINTN_IDENTITY_H = 1;

const int _SYS_SELECT_H = 1;

const int __sigset_t_defined = 1;

const int _SIGSET_NWORDS = 16;

const int __timeval_defined = 1;

const int _STRUCT_TIMESPEC = 1;

const int __NFDBITS = 64;

const int FD_SETSIZE = 1024;

const int NFDBITS = 64;

const int _BITS_PTHREADTYPES_COMMON_H = 1;

const int _THREAD_SHARED_TYPES_H = 1;

const int _BITS_PTHREADTYPES_ARCH_H = 1;

const int __SIZEOF_PTHREAD_MUTEX_T = 40;

const int __SIZEOF_PTHREAD_ATTR_T = 56;

const int __SIZEOF_PTHREAD_RWLOCK_T = 56;

const int __SIZEOF_PTHREAD_BARRIER_T = 32;

const int __SIZEOF_PTHREAD_MUTEXATTR_T = 4;

const int __SIZEOF_PTHREAD_COND_T = 48;

const int __SIZEOF_PTHREAD_CONDATTR_T = 4;

const int __SIZEOF_PTHREAD_RWLOCKATTR_T = 8;

const int __SIZEOF_PTHREAD_BARRIERATTR_T = 4;

const int _THREAD_MUTEX_INTERNAL_H = 1;

const int __PTHREAD_MUTEX_HAVE_PREV = 1;

const int __PTHREAD_RWLOCK_ELISION_EXTRA = 0;

const int __have_pthread_attr_t = 1;
